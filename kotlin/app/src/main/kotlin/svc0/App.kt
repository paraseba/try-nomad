/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package svc0

import org.apache.hc.client5.http.config.RequestConfig
import org.apache.hc.client5.http.cookie.StandardCookieSpec
import org.apache.hc.client5.http.impl.classic.HttpClients
import org.apache.hc.core5.http.ConnectionReuseStrategy
import org.apache.hc.core5.util.Timeout
import org.http4k.client.ApacheClient
import org.http4k.client.PreCannedApacheHttpClients
import org.http4k.core.HttpHandler
import org.http4k.server.Undertow
import org.http4k.core.Method
import org.http4k.core.Request
import org.http4k.core.Response
import org.http4k.server.asServer
import java.util.concurrent.TimeUnit

val client = HttpClients.custom()
        .setDefaultRequestConfig(
            RequestConfig.custom()
            .setRedirectsEnabled(false)
                .setConnectTimeout(Timeout.of(5, TimeUnit.SECONDS))
                .setResponseTimeout(Timeout.of(5, TimeUnit.SECONDS))
                .setConnectionRequestTimeout(Timeout.of(5, TimeUnit.SECONDS))
            .setCookieSpec(StandardCookieSpec.IGNORE)
            .build())
    .build()

val svc1Client by lazy {
    ApacheClient(
        client = client
    )
}

val upstreamUrl by lazy {
    System.getenv("SVC1_URL") ?: "svc1:8080"
}

val handler: HttpHandler = { req: Request ->
    println("///////////////////////////")
    println(upstreamUrl)
    println(req)
    val n  = req.query("n")
    val chainReq = Request(Method.GET, upstreamUrl)
        .query("n", n)
    val res = svc1Client(chainReq)
    println(res)
    Response(res.status).body(res.bodyString())
}

fun main() {
    println("Starting on port 8081")
    handler.asServer(Undertow(8081)).start()
}
